import matplotlib.pyplot as plt
import numpy as np
from sklearn.cluster import KMeans
import pandas as pd
X = np.array([[5,3], [10,15], [15,12], [24,10], [30,45], [85,70], [71,80], [60,78], [55,52], [80,91],])
kmeans = KMeans(n_clusters=2)  # k=2      0 , 1
kmeans.fit(X)
print(kmeans.cluster_centers_)
plt.scatter(X[:,0],X[:,1], label='True Position')
plt.scatter(X[:,0],X[:,1], c=kmeans.labels_, cmap='rainbow')
plt.scatter(X[:,0], X[:,1], c=kmeans.labels_, cmap='rainbow') 
plt.scatter(kmeans.cluster_centers_[:,0] ,kmeans.cluster_centers_[:,1], color='black')
#Customer Segmentation
#https://www.kaggle.com/datasets/vetrirah/customer?resource=download&select=Train.csv
df = pd.read_excel("Train.xlsx")
df.head()
df = df.drop(["Segmentation", "ID"], axis="columns") #drop unnecessary columns
df.dropna(inplace=True)
df.info()
df = df.reset_index()
df
df = df.drop("index", axis="columns")
df.head()
df.info()
df_new = pd.get_dummies(df)
df_new.head()
df_kmeans = pd.get_dummies(df, drop_first=True) #to remove redundandant column
df_kmeans.head()
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaled_df_kmeans = scaler.fit_transform(df_kmeans)
from sklearn.cluster import KMeans
kmeans_model = KMeans(n_clusters=3)
clusters = kmeans_model.fit_predict(df_kmeans)
df_kmeans.insert(df_kmeans.columns.get_loc("Age"), "Cluster", clusters)
df_kmeans
df_kmeans["Cluster"].value_counts()
df_kmeans.Cluster.unique()
ssd = [] #sum of squared distances (SSD)
for k in range(2, 9):
    kmeans_model = KMeans(n_clusters=k)
    kmeans_model.fit(df_kmeans)
    ssd.append(kmeans_model.inertia_)
plt.figure(figsize=(6, 4), dpi=100)
plt.plot(range(2, 9), ssd, color="green", marker="o")
plt.xlabel("Number of clusters (K)")
plt.ylabel("SSD for K")
plt.show()
